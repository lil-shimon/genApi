// tslint:disable
/**
 * Training Menu API
 * A simple menu for exercise
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface InlineObject
 */
export interface InlineObject {
    /**
     * 
     * @type {number}
     * @memberof InlineObject
     */
    planId: number;
    /**
     * 
     * @type {string}
     * @memberof InlineObject
     */
    plannerName?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject
     */
    planName?: string;
    /**
     * 
     * @type {number}
     * @memberof InlineObject
     */
    duration?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineObject
     */
    difficulty?: number;
}
/**
 * 
 * @export
 * @interface InlineResponse400
 */
export interface InlineResponse400 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse400
     */
    message?: string;
}
/**
 * 
 * @export
 * @interface Plan
 */
export interface Plan {
    /**
     * 
     * @type {number}
     * @memberof Plan
     */
    planId: number;
    /**
     * 
     * @type {string}
     * @memberof Plan
     */
    planName?: string;
    /**
     * 
     * @type {string}
     * @memberof Plan
     */
    plannerName?: string;
    /**
     * 
     * @type {number}
     * @memberof Plan
     */
    duration?: number;
    /**
     * 
     * @type {number}
     * @memberof Plan
     */
    difficulty?: number;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Return a list of training plans
         * @param {number} [limit] Limit the number of plans on a page
         * @param {number} [offset] Specifies the page number of the plans to be displayed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plansGet(limit?: number, offset?: number, options: any = {}): RequestArgs {
            const localVarPath = `/plans`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about the plan registerd by the described planner
         * @param {string} plannerName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plansPlannerNameGet(plannerName: string, options: any = {}): RequestArgs {
            // verify required parameter 'plannerName' is not null or undefined
            if (plannerName === null || plannerName === undefined) {
                throw new RequiredError('plannerName','Required parameter plannerName was null or undefined when calling plansPlannerNameGet.');
            }
            const localVarPath = `/plans/{planner_name}`
                .replace(`{${"planner_name"}}`, encodeURIComponent(String(plannerName)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Register a new plan
         * @param {InlineObject} inlineObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plansPost(inlineObject: InlineObject, options: any = {}): RequestArgs {
            // verify required parameter 'inlineObject' is not null or undefined
            if (inlineObject === null || inlineObject === undefined) {
                throw new RequiredError('inlineObject','Required parameter inlineObject was null or undefined when calling plansPost.');
            }
            const localVarPath = `/plans`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof inlineObject !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject !== undefined ? inlineObject : {}) : (inlineObject || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Return a list of training plans
         * @param {number} [limit] Limit the number of plans on a page
         * @param {number} [offset] Specifies the page number of the plans to be displayed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plansGet(limit?: number, offset?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<object>> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).plansGet(limit, offset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get information about the plan registerd by the described planner
         * @param {string} plannerName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plansPlannerNameGet(plannerName: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Plan>> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).plansPlannerNameGet(plannerName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Register a new plan
         * @param {InlineObject} inlineObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plansPost(inlineObject: InlineObject, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).plansPost(inlineObject, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Return a list of training plans
         * @param {number} [limit] Limit the number of plans on a page
         * @param {number} [offset] Specifies the page number of the plans to be displayed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plansGet(limit?: number, offset?: number, options?: any) {
            return DefaultApiFp(configuration).plansGet(limit, offset, options)(axios, basePath);
        },
        /**
         * Get information about the plan registerd by the described planner
         * @param {string} plannerName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plansPlannerNameGet(plannerName: string, options?: any) {
            return DefaultApiFp(configuration).plansPlannerNameGet(plannerName, options)(axios, basePath);
        },
        /**
         * Register a new plan
         * @param {InlineObject} inlineObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plansPost(inlineObject: InlineObject, options?: any) {
            return DefaultApiFp(configuration).plansPost(inlineObject, options)(axios, basePath);
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Return a list of training plans
     * @param {number} [limit] Limit the number of plans on a page
     * @param {number} [offset] Specifies the page number of the plans to be displayed
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public plansGet(limit?: number, offset?: number, options?: any) {
        return DefaultApiFp(this.configuration).plansGet(limit, offset, options)(this.axios, this.basePath);
    }

    /**
     * Get information about the plan registerd by the described planner
     * @param {string} plannerName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public plansPlannerNameGet(plannerName: string, options?: any) {
        return DefaultApiFp(this.configuration).plansPlannerNameGet(plannerName, options)(this.axios, this.basePath);
    }

    /**
     * Register a new plan
     * @param {InlineObject} inlineObject 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public plansPost(inlineObject: InlineObject, options?: any) {
        return DefaultApiFp(this.configuration).plansPost(inlineObject, options)(this.axios, this.basePath);
    }

}


